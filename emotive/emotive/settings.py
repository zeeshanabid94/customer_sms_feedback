"""
Django settings for emotive project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from twilio.rest import Client
import dj_database_url


ENVIRONMENT = os.environ.get("ENVIRONMENT")
DATABASE_URL = os.environ.get("DATABASE_URL")
AZURE_KEY = os.environ.get("AZURE_KEY").strip()
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# TWILIO ACCOUNT SID, AUTH TOKEN AND CLIENT
TWILIO_LIVE_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
TWILIO_LIVE_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")
TWILIO_CLIENT = Client(TWILIO_LIVE_ACCOUNT_SID, TWILIO_LIVE_AUTH_TOKEN)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    # For local development
    'localhost', 
    
    # Needed while developing with Twilio
    'a2ff5e8c.ngrok.io',
    
    # Heroku Host URL
    'emotive-project.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sms_feedback'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'emotive.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
        'DIRS': [
            os.path.join(BASE_DIR, "../frontend/build"),
        ]
    },
]

WSGI_APPLICATION = 'emotive.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
if (ENVIRONMENT != 'prod'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get("DATABASE_NAME").strip(),
            'USER': os.environ.get("DATABASE_USER").strip(),
            'PASSWORD': os.environ.get("DATABASE_PASSWORD").strip(),
            'HOST': 'localhost'
        }
    }
else:
    DATABASES = {}
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL, conn_max_age=0)




# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "../frontend/build/static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, "debug.log"),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'sms_feedback': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propogate': True
        }
    },
}